// Generated by CoffeeScript 2.3.1
(function() {
  /*

  parser = new NEARLEY.Parser NEARLEY.Grammar.fromCompiled G
  debug join ( key for key of parser ), ' '
  debug parser.options
   * parser.rewind() is deprecated https://github.com/kach/nearley/issues/261

   */
  'use strict';
  var CND, SQY, alert, badge, debug, echo, eq, help, include, info, join, jr, log, rpr, test, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'SQY/GRAMMAR/TESTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  eq = CND.equals;

  jr = JSON.stringify;

  //...........................................................................................................
  SQY = require('../sqy');

  join = function(x, joiner = '') {
    return x.join(joiner);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._main = function() {
    return test(this, {
      'timeout': 30000
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this["basic"] = function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers, result;
    probes_and_matchers = [
      [
        "set debug to true;",
        {
          "type": "set_debug",
          "value": true,
          "loc": "1#1"
        }
      ],
      [
        "set debug to true ;",
        {
          "type": "set_debug",
          "value": true,
          "loc": "1#1"
        }
      ],
      [
        "set  debug to true;",
        {
          "type": "set_debug",
          "value": true,
          "loc": "1#1"
        }
      ],
      [
        "set  debug to true; ",
        {
          "type": "set_debug",
          "value": true,
          "loc": "1#1"
        }
      ],
      [
        "set  debug to true ;",
        {
          "type": "set_debug",
          "value": true,
          "loc": "1#1"
        }
      ],
      [
        "set  debug to true  ;",
        {
          "type": "set_debug",
          "value": true,
          "loc": "1#1"
        }
      ],
      [
        " set debug to true ;",
        {
          "type": "set_debug",
          "value": true,
          "loc": "1#2"
        }
      ],
      ["setdebugto",
      null],
      ["setdebugtotrue",
      null],
      ["setdebugtotrue;",
      null],
      [
        " set debug to true ; ",
        {
          "type": "set_debug",
          "value": true,
          "loc": "1#2"
        }
      ],
      [
        "  set   debug   to   true ; ",
        {
          "type": "set_debug",
          "value": true,
          "loc": "1#3"
        }
      ],
      [
        "  select   fields #myfield;",
        {
          "type": "select_fields",
          "selectors": [
            {
              "type": "id",
              "id": "#myfield"
            }
          ],
          "loc": "1#3"
        }
      ],
      [
        "select fields #myfield;",
        {
          "type": "select_fields",
          "selectors": [
            {
              "type": "id",
              "id": "#myfield"
            }
          ],
          "loc": "1#1"
        }
      ],
      [
        "select  fields #myfield;",
        {
          "type": "select_fields",
          "selectors": [
            {
              "type": "id",
              "id": "#myfield"
            }
          ],
          "loc": "1#1"
        }
      ],
      [
        "create layout #mylayout;",
        {
          "type": "create_layout",
          "id": "#mylayout",
          "loc": "1#1"
        }
      ],
      [
        "create field at A1;",
        {
          "type": "create_field",
          "id": null,
          "selector": {
            "type": "cellkey",
            "value": "A1"
          },
          "loc": "1#1"
        }
      ],
      [
        "create field #myfield at A1;",
        {
          "type": "create_field",
          "id": "#myfield",
          "selector": {
            "type": "cellkey",
            "value": "A1"
          },
          "loc": "1#1"
        }
      ],
      [
        "create field #myfield at A1..B2;",
        {
          "type": "create_field",
          "id": "#myfield",
          "selector": {
            "type": "rangekey",
            "first": {
              "type": "cellkey",
              "value": "A1"
            },
            "second": {
              "type": "cellkey",
              "value": "B2"
            }
          },
          "loc": "1#1"
        }
      ],
      [
        "create field #myfield at *;",
        {
          "type": "create_field",
          "id": "#myfield",
          "selector": {
            "type": "cellkey",
            "value": "*"
          },
          "loc": "1#1"
        }
      ],
      [
        "set debug to false;",
        {
          "type": "set_debug",
          "value": false,
          "loc": "1#1"
        }
      ],
      [
        "set grid to G5;",
        {
          "type": "set_grid",
          "size": {
            "type": "cellkey",
            "value": "G5"
          },
          "loc": "1#1"
        }
      ],
      ["select D3;",
      null],
      [
        "select fields D3;",
        {
          "type": "select_fields",
          "selectors": [
            {
              "type": "cellkey",
              "value": "D3"
            }
          ],
          "loc": "1#1"
        }
      ],
      [
        "select fields D3..E6;",
        {
          "type": "select_fields",
          "selectors": [
            {
              "type": "rangekey",
              "first": {
                "type": "cellkey",
                "value": "D3"
              },
              "second": {
                "type": "cellkey",
                "value": "E6"
              }
            }
          ],
          "loc": "1#1"
        }
      ],
      [
        "select fields D12..E34,AA11;",
        {
          "type": "select_fields",
          "selectors": [
            {
              "type": "rangekey",
              "first": {
                "type": "cellkey",
                "value": "D12"
              },
              "second": {
                "type": "cellkey",
                "value": "E34"
              }
            },
            {
              "type": "cellkey",
              "value": "AA11"
            }
          ],
          "loc": "1#1"
        }
      ],
      [
        "select fields D12..E34, AA11;",
        {
          "type": "select_fields",
          "selectors": [
            {
              "type": "rangekey",
              "first": {
                "type": "cellkey",
                "value": "D12"
              },
              "second": {
                "type": "cellkey",
                "value": "E34"
              }
            },
            {
              "type": "cellkey",
              "value": "AA11"
            }
          ],
          "loc": "1#1"
        }
      ],
      [
        "select fields #myfield;",
        {
          "type": "select_fields",
          "selectors": [
            {
              "type": "id",
              "id": "#myfield"
            }
          ],
          "loc": "1#1"
        }
      ],
      [
        "set $foobar to 'some text';",
        {
          "type": "assignment",
          "id": "$foobar",
          "rhs": {
            "type": "text",
            "value": "some text"
          },
          "loc": "1#1"
        }
      ],
      [
        "set $foobar to +1.2334;",
        {
          "type": "assignment",
          "id": "$foobar",
          "rhs": {
            "type": "number",
            "value": 1.2334
          },
          "loc": "1#1"
        }
      ],
      [
        "set top border to 'thin, blue';",
        {
          "type": "set_ctx_border",
          "edges": ["top"],
          "style": "thin, blue",
          "loc": "1#1"
        }
      ],
      [
        "set top, bottom border to 'thin, blue';",
        {
          "type": "set_ctx_border",
          "edges": ["top",
        "bottom"],
          "style": "thin, blue",
          "loc": "1#1"
        }
      ],
      [
        "set all, bottom border to 'thin, blue';",
        {
          "type": "set_ctx_border",
          "edges": ["all",
        "bottom"],
          "style": "thin, blue",
          "loc": "1#1"
        }
      ],
      [
        "set all border to 'thin, blue';",
        {
          "type": "set_ctx_border",
          "edges": ["all"],
          "style": "thin, blue",
          "loc": "1#1"
        }
      ],
      [
        "set top, bottom borders to 'thin, blue';",
        {
          "type": "set_ctx_border",
          "edges": ["top",
        "bottom"],
          "style": "thin, blue",
          "loc": "1#1"
        }
      ],
      [
        "set all borders to 'thin, blue';",
        {
          "type": "set_ctx_border",
          "edges": ["all"],
          "style": "thin, blue",
          "loc": "1#1"
        }
      ],
      [
        "set top border of C3 to 'thin, blue';",
        {
          "type": "set_sel_border",
          "edges": ["top"],
          "selectors": [
            {
              "type": "cellkey",
              "value": "C3"
            }
          ],
          "style": "thin, blue",
          "loc": "1#1"
        }
      ],
      [
        "set top border of C3, D4 to 'red';",
        {
          "type": "set_sel_border",
          "edges": ["top"],
          "selectors": [
            {
              "type": "cellkey",
              "value": "C3"
            },
            {
              "type": "cellkey",
              "value": "D4"
            }
          ],
          "style": "red",
          "loc": "1#1"
        }
      ],
      [
        "set top border of #thatfield to 'thick';",
        {
          "type": "set_sel_border",
          "edges": ["top"],
          "selectors": [
            {
              "type": "id",
              "id": "#thatfield"
            }
          ],
          "style": "thick",
          "loc": "1#1"
        }
      ],
      [
        "select fields #myfield;                       set top border to 'thin, blue';",
        [
          {
            "type": "select_fields",
            "selectors": [
              {
                "type": "id",
                "id": "#myfield"
              }
            ],
            "loc": "1#1"
          },
          {
            "type": "set_ctx_border",
            "edges": ["top"],
            "style": "thin, blue",
            "loc": "1#47"
          }
        ]
      ],
      [
        "select fields #myfield;                       set top border to 'thin, blue';",
        [
          {
            "type": "select_fields",
            "selectors": [
              {
                "type": "id",
                "id": "#myfield"
              }
            ],
            "loc": "1#1"
          },
          {
            "type": "set_ctx_border",
            "edges": ["top"],
            "style": "thin, blue",
            "loc": "1#47"
          }
        ]
      ],
      [
        "select fields #myfield, #thatone, A1..B2;     set all borders to 'thin';",
        [
          {
            "type": "select_fields",
            "selectors": [
              {
                "type": "id",
                "id": "#myfield"
              },
              {
                "type": "id",
                "id": "#thatone"
              },
              {
                "type": "rangekey",
                "first": {
                  "type": "cellkey",
                  "value": "A1"
                },
                "second": {
                  "type": "cellkey",
                  "value": "B2"
                }
              }
            ],
            "loc": "1#1"
          },
          {
            "type": "set_ctx_border",
            "edges": ["all"],
            "style": "thin",
            "loc": "1#47"
          }
        ]
      ]
    ];
//.........................................................................................................
// ["select fields .caption;                       set horizontal alignment to left;"]
// ["select cells D3..E6; create field #myfield; set border to 'thin'; set halign to center;"]
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher] = probes_and_matchers[i];
      try {
        result = SQY.parse(probe);
      } catch (error1) {
        error = error1;
        // throw error
        if (matcher === null) {
          T.ok(true);
          help('36633', jr([probe, null]));
        } else {
          T.fail(error.message);
          warn('36633', jr([probe, null]));
        }
        continue;
      }
      urge('36633', jr([probe, result]));
      T.eq(result, matcher);
    }
    //.........................................................................................................
    return done();
  };

  //###########################################################################################################
  if (module.parent == null) {
    include = ["basic"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=sqy-grammar.test.js.map
