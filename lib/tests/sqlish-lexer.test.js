// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CND, LXR, alert, badge, debug, echo, eq, help, include, info, join, jr, log, rpr, test, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'XXX/TESTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  eq = CND.equals;

  jr = JSON.stringify;

  //...........................................................................................................
  LXR = require('../sqlish-lexer');

  join = function(x, joiner = '') {
    return x.join(joiner);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._main = function() {
    return test(this, {
      'timeout': 30000
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this["basic"] = function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers, result, token;
    probes_and_matchers = [["create layout #mylayout;", "create,layout,id/'#mylayout',semicolon/';'"], ["create field at A1..B2;", "create,field,at,rowletters/'A',coldigits/'1',upto/'..',rowletters/'B',coldigits/'2',semicolon/';'"], ["set grid to G5;", "set,grid,to,rowletters/'G',coldigits/'5',semicolon/';'"], ["set debug to false;", "set,name/'debug',to,boolean/false,semicolon/';'"], ["create field at A1;", "create,field,at,rowletters/'A',coldigits/'1',semicolon/';'"], ["create field at A1..B2;", "create,field,at,rowletters/'A',coldigits/'1',upto/'..',rowletters/'B',coldigits/'2',semicolon/';'"], ["create field #myfield at A1..B2;", "create,field,id/'#myfield',at,rowletters/'A',coldigits/'1',upto/'..',rowletters/'B',coldigits/'2',semicolon/';'"], ["select fields #myfield:                       set top border to 'thin, blue';", "select,fields,id/'#myfield',colon/':',set,edge/'top',border,to,sq_string/'\\'thin, blue\\'',semicolon/';'"], ["select fields #myfield, #thatone, .h, A1..B2: set top border to 'thin, blue';", "select,fields,id/'#myfield',comma/',',id/'#thatone',comma/',',clasz/'.h',comma/',',rowletters/'A',coldigits/'1',upto/'..',rowletters/'B',coldigits/'2',colon/':',set,edge/'top',border,to,sq_string/'\\'thin, blue\\'',semicolon/';'"], ["select fields .caption:                       set horizontal alignment to left;", "select,fields,clasz/'.caption',colon/':',set,halign/'horizontal alignment',to,edge/'left',semicolon/';'"], ["select fields .caption:                       set valign to top;", "select,fields,clasz/'.caption',colon/':',set,valign,to,edge/'top',semicolon/';'"], ["select fields *1: set valign to top;", "select,fields,star/'*',coldigits/'1',colon/':',set,valign,to,edge/'top',semicolon/';'"], ["select fields *: set valign to top;", "select,fields,star/'*',colon/':',set,valign,to,edge/'top',semicolon/';'"], ["select fields *..*: set valign to top;", "select,fields,star/'*',upto/'..',star/'*',colon/':',set,valign,to,edge/'top',semicolon/';'"], ["select fields *: set valign to top;", "select,fields,star/'*',colon/':',set,valign,to,edge/'top',semicolon/';'"]];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher] = probes_and_matchers[i];
      LXR.lexer.reset(probe);
      result = [];
      try {
        while ((token = LXR.lexer.next()) != null) {
          if (token.type !== 'lws') {
            if (token.type === token.value) {
              result.push(`${token.type}`);
            } else {
              result.push(`${token.type}/${rpr(token.value)}`);
            }
          }
        }
      } catch (error1) {
        error = error1;
        T.fail(error.message);
        continue;
      }
      result = join(result, ',');
      urge('36633', jr([probe, result]));
      T.eq(result, matcher);
    }
    //.........................................................................................................
    return done();
  };

  //###########################################################################################################
  if (module.parent == null) {
    include = ["basic"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=sqlish-lexer.test.js.map
