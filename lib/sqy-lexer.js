// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CND, MOO, alert, assign, badge, debug, echo, help, info, join, jr, keywords, log, rpr, syntax, urge, warn, whisper, words_of;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'SQY/LEXING';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  jr = JSON.stringify;

  assign = Object.assign;

  // new_xregex                = require 'xregexp'
  MOO = require('moo');

  words_of = function(text) {
    return text.split(/\s+/);
  };

  join = function(x, joiner = '') {
    return x.join(joiner);
  };

  keywords = MOO.keywords({
    create: 'create',
    set: 'set',
    layout: 'layout',
    field: 'field',
    fields: 'fields',
    border: 'border',
    borders: 'borders',
    grid: 'grid',
    select: 'select',
    at: 'at',
    to: 'to',
    of: 'of',
    all: 'all',
    top: 'top',
    left: 'left',
    bottom: 'bottom',
    right: 'right',
    center: 'center',
    justified: 'justified',
    unit: 'unit',
    column: 'column',
    col: 'col',
    row: 'row',
    width: 'width',
    widths: 'widths',
    height: 'height',
    heights: 'heights'
  });

  syntax = {
    dq_string: {
      match: /"(?:\\["\\]|[^\n"\\])*"/,
      value: (function(s) {
        return s.slice(1, s.length - 1);
      })
    },
    sq_string: {
      match: /'(?:\\['\\]|[^\n'\\])*'/,
      value: (function(s) {
        return s.slice(1, s.length - 1);
      })
    },
    halign: /horizontal\s+alignment|halign/,
    valign: /vertical\s+alignment|valign/,
    id: /\#[-_a-z]+/,
    clasz: /\.[-_a-z]+/,
    vname: /\$[-_a-z]+/,
    boolean: {
      match: words_of('true false'),
      value: (function(s) {
        if (s === 'true') {
          return true;
        } else {
          return false;
        }
      })
    },
    name: {
      match: /[a-z]+/,
      type: keywords
    },
    upto: /\.\./,
    cellkey: /\*[-+]?[0-9]+|[-+]?[A-Z]+\*|[-+]?[A-Z]+[-+]?[0-9]+|\*/,
    float: {
      match: /[-+]?(?:0|[1-9][0-9]*)\.[0-9]+/,
      value: (function(s) {
        return parseFloat(s);
      })
    },
    integer: {
      match: /[-+]?(?:0|[1-9][0-9]*)/,
      value: (function(s) {
        return parseInt(s, 10);
      })
    },
    // star:             /// \* ///
    upto: '..',
    comma: ',',
    colon: ':',
    cheat: '!cheat',
    comment: /\#[\x20\t]+.*?(?:\n|$)/,
    semicolon: /\s*;\s*/,
    ws: {
      match: /[\x20\t\n]+/,
      lineBreaks: true
    },
    // lws:              /// [ \x20 \t ]+ ///
    nl: {
      match: /\n/,
      lineBreaks: true
    }
  };

  this.lexer = MOO.compile(syntax);

}).call(this);

//# sourceMappingURL=sqy-lexer.js.map
