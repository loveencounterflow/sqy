// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CND, GRAMMAR, Idl_lexer, NCR, NEARLEY, PATH, badge, debug, echo, help, info, log, new_parser, rpr, urge, warn, whisper;

  //###########################################################################################################
  PATH = require('path');

  //...........................................................................................................
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'NEARlEY';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  NEARLEY = require('nearley');

  GRAMMAR = require('./idl');

  //===========================================================================================================
  // COMPATIBILITY WITH MKNCR
  //-----------------------------------------------------------------------------------------------------------
  NCR = Object.create(require('ncr'));

  NCR._input_default = 'xncr';

  NCR.jzr_as_uchr = function(glyph) {
    if ((this.as_csg(glyph)) === 'jzr') {
      // return @as_uchr glyph, input: 'xncr' if ( @as_csg glyph, input: 'xncr' ) is 'jzr'
      return this.as_uchr(glyph);
    }
    return glyph;
  };

  //-----------------------------------------------------------------------------------------------------------
  NCR.jzr_as_xncr = function(glyph) {
    var nfo;
    // nfo = @analyze glyph, input: 'xncr'
    nfo = this.analyze(glyph);
    if (!((nfo.rsg === 'u-pua') || (nfo.csg === 'jzr'))) {
      return glyph;
    }
    return this.as_chr(nfo.cid, {
      csg: 'jzr'
    });
  };

  //===========================================================================================================
  // LEXER
  //-----------------------------------------------------------------------------------------------------------
  Idl_lexer = function() {
    this.reset('');
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  Idl_lexer.prototype.reset = function(data, state) {
    debug('3321-1', 'Idl_lexer::reset', Array.from(arguments));
    this.buffer = NCR.chrs_from_text(data, {
      input: 'xncr'
    });
    debug('3321-1', this.buffer);
    this.index = 0;
    this.line = state ? state.line : 1;
    this.prv_nl = state ? -state.col : 0;
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  Idl_lexer.prototype.next = function() {
    var chr;
    debug('3321-2', 'Idl_lexer::next', Array.from(arguments));
    if (this.index < this.buffer.length) {
      chr = this.buffer[this.index];
      this.index += +1;
      if (chr === '\n') {
        this.line += +1;
        this.prv_nl = this.index;
      }
      debug('3321-2', {
        value: chr
      });
      return {
        value: chr
      };
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  Idl_lexer.prototype.save = function() {
    debug('3321-3', 'Idl_lexer::save', Array.from(arguments));
    return {
      line: this.line,
      col: this.index - this.prv_nl
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  Idl_lexer.prototype.formatError = function(token, message) {
    var R;
    debug('3321-4', 'Idl_lexer::formatError', Array.from(arguments));
    R = `${message} at index ${this.index - 1} (${this.buffer.join('')})`;
    debug('3321-4', rpr(this.index));
    debug('3321-4', rpr(R));
    return R;
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  new_parser = function() {
    return new NEARLEY.Parser(GRAMMAR.ParserRules, GRAMMAR.ParserStart, {
      lexer: new Idl_lexer()
    });
  };

  help((new_parser().feed('⿵xx')).results);

  help((new_parser().feed('⿰ab')).results);

  help((new_parser().feed('⿰⿰abc')).results);

  // help ( new_parser().feed 'u-cjk-xa-3412   㐒      ⿱⿱刀口乙' ).results
  help((new_parser().feed('⿱刀口')).results);

  help((new_parser().feed('⿱⿱刀口乙')).results);

  help((new_parser().feed('⿰')).results);

  help((new_parser().feed('⿰a')).results);

  help((new_parser().feed('⿱⿱ 刀口乙')).results);

  help((new_parser().feed('⿱ 刀')).results);

  // CND.dir x

// help x.results

}).call(this);

//# sourceMappingURL=main.js.map
