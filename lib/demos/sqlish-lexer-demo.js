// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CND, LXR, P, alert, assign, badge, color, colors, debug, echo, error, help, i, info, join, jr, len, log, ref, rpr, source, sources, token, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'XXX/LEXING';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  jr = JSON.stringify;

  assign = Object.assign;

  LXR = require('../sqlish-lexer');

  join = function(x, joiner = '') {
    return x.join(joiner);
  };

  //-----------------------------------------------------------------------------------------------------------
  colors = {
    command: CND.gold,
    name: CND.red,
    id: CND.green,
    clasz: CND.green,
    dq_string: function(...P) {
      return CND.reverse(CND.white(CND.bold(...P)));
    },
    sq_string: function(...P) {
      return CND.reverse(CND.white(CND.bold(...P)));
    },
    boolean: CND.blue
  };

  // cellkey:    CND.blue
  // upto:       CND.blue
  // aux:        CND.yellow
  // comma:      ( P... ) -> CND.yellow CND.bold CND.reverse P...
  // colon:      ( P... ) -> CND.yellow CND.bold CND.reverse P...
  // semicolon:  ( P... ) -> CND.yellow CND.bold CND.reverse P...
  sources = ["create field at A1..B2;", "create layout #mylayout;", "set grid to G5;", "set debug to false;", "create field at A1;", "create field at A1..B2;", "create field #myfield at A1..B2;", "select fields #myfield:                       set top border to 'thin, blue';", "select fields #myfield, #thatone, .h, A1..B2: set top border to 'thin, blue';", "select fields .caption:                       set horizontal alignment to left;", "select fields .caption:                       set valign to top;", "select fields *1: set valign to top;", "select fields **: set valign to top;", "select fields **..**: set valign to top;", "select fields *: set valign to top;"];

  for (i = 0, len = sources.length; i < len; i++) {
    source = sources[i];
    info(rpr(source));
    LXR.lexer.reset(source);
    P = [];
    try {
      while ((token = LXR.lexer.next()) != null) {
        if (token.type !== 'lws') {
          color = (ref = colors[token.type]) != null ? ref : null;
          if (token.type === token.text) {
            if (color == null) {
              color = CND.gold;
            }
          }
          if (color == null) {
            color = CND.white;
          }
          P.push(join([CND.grey(token.type.padStart(15)), color(token.value)]));
        }
      }
    } catch (error1) {
      error = error1;
      warn(error.message);
      // continue
      break;
    }
    echo(join(P, '\n'));
  }

  // debug ( key for key of LXR.lexer )
  help('done');

}).call(this);

//# sourceMappingURL=sqlish-lexer-demo.js.map
