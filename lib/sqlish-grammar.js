// Generated by CoffeeScript 2.3.1
(function() {
  // Generated automatically by nearley, version 2.15.1
  // http://github.com/Hardmath123/nearley
  (function() {
    /*======================================================================================================*/
    /* ====================================================================================================
    nearleyc sqlish.ne -o sqlish.coffee && coffee -c sqlish.coffee && nearley-test -q -i 'create field;' sqlish.js
    nearley-railroad sqlish.ne -o sqlish.html
    nearley-unparse -n 10 sqlish.js

    create layout #mylayout;
    set grid to G5;
    set debug to false;
    create field at A1;
    create field at A1..B2;
    create field #myfield at A1..B2;
    select fields #myfield:                       set top border to 'thin, blue';
    select fields #myfield, #thatone, .h, A1..B2: set top border to 'thin, blue';
    select fields .caption:                       set horizontal alignment to left;

     * in layout #mylayout, create field at A1;
     * in layout #mylayout, create field at A1..B2;
     * in layout #mylayout, create field at A1, at B2, #anotherfield at C3..D5;
     * in layout #mylayout, create field #myfield at A1..B2;
     * select layout #mylayout, then create: field  #myfield at A1, field at B1, field #another at C3;
     * select layout #mylayout, then create  field: #myfield at A1,       at B1,       #another at C3;
     * create layout: #this, #that;
     * create: layout #this, layout #that;
     * create layout #mylayout, then: create field  #caption.h at A1..D1, create field .text at: A2, B2, C2, D2;
     * create layout #mylayout, then create: field  #caption.h at A1..D1,        field .text at: A2, B2, C2, D2;
     * create layout #mylayout, then create  field: #caption.h at A1..D1,              .text at: A2, B2, C2, D2;

     */
    /*======================================================================================================*/
    var $_show, $assignment, $cellkey, $clasz, $create_layout, $create_named_field, $create_unnamed_field, $filter, $filter_flatten, $first, $first_value, $flatten, $id, $ignore, $last, $only_one, $rangekey, $select_fields, $set_ctx_border, $set_debug, $set_grid, $set_sel_border, CND, _create_field, alert, badge, debug, echo, enumerate, filter, filtered, flatten, get_loc, grammar, help, id, info, join, jr, lexer, log, rpr, show, urge, warn, whisper, Σ;
    id = function(d) {
      return d[0];
    };
    'use strict';
    
    //###########################################################################################################
    CND = require('cnd');
    rpr = CND.rpr;
    badge = 'SQLISH/GRAMMAR';
    log = CND.get_logger('plain', badge);
    info = CND.get_logger('info', badge);
    whisper = CND.get_logger('whisper', badge);
    alert = CND.get_logger('alert', badge);
    debug = CND.get_logger('debug', badge);
    warn = CND.get_logger('warn', badge);
    help = CND.get_logger('help', badge);
    urge = CND.get_logger('urge', badge);
    echo = CND.echo.bind(CND);
    ({lexer} = require('./sqlish-lexer'));
    
    //-----------------------------------------------------------------------------------------------------------
    log = function(...P) {
      return console.log(...P);
    };
    jr = JSON.stringify;
    
    //-----------------------------------------------------------------------------------------------------------
    flatten = function(d, n = 1) {
      if (n < 1) {
        return d;
      }
      return (n === 1 ? d : flatten(d, n - 1)).reduce((function(a, b) {
        return a.concat(b);
      }), []);
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $flatten = function(d, n = 1) {
      return flatten(d, n);
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $filter = function(d) {
      return d.filter(function(x) {
        return x !== null;
      });
    };
    
    //-----------------------------------------------------------------------------------------------------------
    filter = function*(d) {
      var i, len, x;
      for (i = 0, len = d.length; i < len; i++) {
        x = d[i];
        if (x === null) {
          continue;
        }
        if (x === Symbol.for('LWS')) {
          continue;
        }
        if (x === Symbol.for('STOP')) {
          continue;
        }
        if (x.type === 'semicolon') {
          continue;
        }
        yield x;
      }
    };
    
    //-----------------------------------------------------------------------------------------------------------
    filtered = function(d) {
      return [...(filter(d))];
    };
    
    //-----------------------------------------------------------------------------------------------------------
    enumerate = function*(iterator) {
      var idx, results, x;
      idx = 0;
      results = [];
      for (x of iterator) {
        results.push((yield [x, idx++]));
      }
      return results;
    };
    
    //-----------------------------------------------------------------------------------------------------------
    show = function(ref, d) {
      var i, idx, len, token;
      for (idx = i = 0, len = d.length; i < len; idx = ++i) {
        token = d[idx];
        log(CND.grey(ref), CND.white(idx), CND.yellow(jr(token)));
      }
      return null;
    };
    
    //-----------------------------------------------------------------------------------------------------------
    Σ = function(key) {
      return function() {
        return Symbol.for(key);
      };
    };
    $ignore = function() {
      return null;
    };
    join = function(x, joiner = '') {
      return x.join(joiner);
    };
    get_loc = function(token) {
      return `${token.line}#${token.col}`;
    };
    $first = function(x) {
      return x[0];
    };
    $first_value = function(type) {
      return function(d) {
        return {
          type,
          value: d[0].value
        };
      };
    };
    $last = function(x) {
      return x[x.length - 1];
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $clasz = function(d) {
      var type;
      type = 'clasz';
      id = d[0].value;
      return {
        type: 'clasz',
        id
      };
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $id = function(d) {
      var type;
      type = 'id';
      id = d[0].value;
      return {
        type: 'id',
        id
      };
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $cellkey = function(d) {
      var type, value;
      type = 'cellkey';
      value = d[0].value;
      return {type, value};
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $rangekey = function(d) {
      var UPTO, first, second, type;
      // debug '$rangekey', d
      type = 'rangekey';
      [first, UPTO, second] = d;
      return {type, first, second};
    };
    
    //-----------------------------------------------------------------------------------------------------------
    _create_field = function(first, selector, id) {
      var loc, ref1, type;
      loc = get_loc(first);
      type = 'create_field';
      // selector  = { type: 'star', } if selector.type is 'star'
      id = (ref1 = id != null ? id.id : void 0) != null ? ref1 : null;
      return {type, id, selector, loc};
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $create_named_field = function(d) {
      var AT, CREATE, FIELD, selector;
      [CREATE, FIELD, id, AT, selector] = filtered(d);
      return _create_field(CREATE, selector, id);
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $create_unnamed_field = function(d) {
      var AT, CREATE, FIELD, selector;
      [CREATE, FIELD, AT, selector] = filtered(d);
      return _create_field(CREATE, selector, null);
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $create_layout = function(d) {
      var CREATE, LAYOUT, loc, type;
      [CREATE, LAYOUT, id] = filtered(d);
      loc = get_loc(CREATE);
      type = 'create_layout';
      id = id.id;
      return {type, id, loc};
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $set_grid = function(d) {
      var GRID, SET, TO, cellkey, loc, size, type;
      [SET, GRID, TO, cellkey] = filtered(d);
      loc = get_loc(SET);
      type = 'set_grid';
      size = cellkey;
      return {type, size, loc};
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $set_ctx_border = function(d) {
      var BORDER, SET, TO, edge, edges, loc, style, type;
      [SET, edges, BORDER, TO, style] = filtered(d);
      loc = get_loc(SET);
      type = 'set_ctx_border';
      style = style.value;
      edges = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = edges.length; i < len; i++) {
          edge = edges[i];
          results.push(edge.value);
        }
        return results;
      })();
      return {type, edges, style, loc};
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $set_sel_border = function(d) {
      var BORDER, OF, SET, TO, edge, edges, loc, selectors, style, type;
      [SET, edges, BORDER, OF, selectors, TO, style] = filtered(d);
      loc = get_loc(SET);
      type = 'set_sel_border';
      style = style.value;
      edges = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = edges.length; i < len; i++) {
          edge = edges[i];
          results.push(edge.value);
        }
        return results;
      })();
      return {type, edges, selectors, style, loc};
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $assignment = function(d) {
      var SET, TO, loc, rhs, type, value, vname;
      [SET, vname, TO, value] = filtered(d);
      type = (function() {
        switch (value.type) {
          case 'sq_string':
          case 'dq_string':
            return 'text';
          case 'float':
          case 'integer':
            return 'number';
          default:
            return value.type;
        }
      })();
      rhs = {
        type,
        value: value.value
      };
      loc = get_loc(SET);
      type = 'assignment';
      id = vname.value;
      return {type, id, rhs, loc};
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $set_debug = function(d) {
      var DEBUG, SET, TO, loc, toggle, type, value;
      [SET, DEBUG, TO, toggle] = filtered(d);
      loc = get_loc(SET);
      type = 'set_debug';
      value = toggle.value;
      return {type, value, loc};
    };
    
    //-----------------------------------------------------------------------------------------------------------
    $select_fields = function(d) {
      var FIELDS, SELECT, loc, selectors, type;
      [SELECT, FIELDS, selectors] = filtered(d);
      loc = get_loc(SELECT);
      type = 'select_fields';
      return {type, selectors, loc};
    };
    $_show = function(ref) {
      return function(x) {
        return debug('44431', x);
      };
    };
    $filter_flatten = function(d) {
      return filtered(flatten(d, 2));
    };
    $only_one = function(d) {
      if (d.length !== 1) {
        throw new Error(`µ44909 detected ambiguous grammar ${rpr(d)}`);
      }
      return d[0];
    };
    grammar = {
      Lexer: lexer,
      ParserRules: [
        {
          "name": "source",
          "symbols": ["_",
        "phrase",
        "source"],
          "postprocess": $filter_flatten
        },
        {
          "name": "source",
          "symbols": ["_",
        "phrase"],
          "postprocess": $last
        },
        {
          "name": "phrase",
          "symbols": ["create"],
          "postprocess": $only_one
        },
        {
          "name": "phrase",
          "symbols": ["set"],
          "postprocess": $only_one
        },
        {
          "name": "phrase",
          "symbols": ["select"],
          "postprocess": $only_one
        },
        {
          "name": "create",
          "symbols": ["create_field"],
          "postprocess": $first
        },
        {
          "name": "create",
          "symbols": ["create_layout"],
          "postprocess": $first
        },
        {
          "name": "create_field",
          "symbols": ["create_named_field"],
          "postprocess": $first
        },
        {
          "name": "create_field",
          "symbols": ["create_unnamed_field"],
          "postprocess": $first
        },
        {
          "name": "create_named_field",
          "symbols": [
            {
              "literal": "create"
            },
            "__",
            {
              "literal": "field"
            },
            "__",
            "id",
            "__",
            {
              "literal": "at"
            },
            "__",
            "cell_selector",
            "s"
          ],
          "postprocess": $create_named_field
        },
        {
          "name": "create_unnamed_field",
          "symbols": [
            {
              "literal": "create"
            },
            "__",
            {
              "literal": "field"
            },
            "__",
            {
              "literal": "at"
            },
            "__",
            "cell_selector",
            "s"
          ],
          "postprocess": $create_unnamed_field
        },
        {
          "name": "create_layout",
          "symbols": ["create_named_layout"],
          "postprocess": $first
        },
        {
          "name": "create_named_layout",
          "symbols": [
            {
              "literal": "create"
            },
            "__",
            {
              "literal": "layout"
            },
            "__",
            "id",
            "s"
          ],
          "postprocess": $create_layout
        },
        {
          "name": "set",
          "symbols": ["set_grid"],
          "postprocess": $first
        },
        {
          "name": "set",
          "symbols": ["set_debug"],
          "postprocess": $first
        },
        {
          "name": "set",
          "symbols": ["assignment"],
          "postprocess": $first
        },
        {
          "name": "set",
          "symbols": ["set_ctx_border"],
          "postprocess": $first
        },
        {
          "name": "set",
          "symbols": ["set_sel_border"],
          "postprocess": $first
        },
        {
          "name": "set_grid",
          "symbols": [
            {
              "literal": "set"
            },
            "__",
            {
              "literal": "grid"
            },
            "__",
            {
              "literal": "to"
            },
            "__",
            "gridsize",
            "s"
          ],
          "postprocess": $set_grid
        },
        {
          "name": "set_debug",
          "symbols": [
            {
              "literal": "set"
            },
            "__",
            {
              "literal": "debug"
            },
            "__",
            {
              "literal": "to"
            },
            "__",
            {
              type: "boolean"
            },
            "s"
          ],
          "postprocess": $set_debug
        },
        {
          "name": "set_ctx_border",
          "symbols": [
            {
              "literal": "set"
            },
            "__",
            "edges",
            "__",
            "border_s",
            "__",
            {
              "literal": "to"
            },
            "__",
            "style",
            "s"
          ],
          "postprocess": $set_ctx_border
        },
        {
          "name": "set_sel_border",
          "symbols": [
            {
              "literal": "set"
            },
            "__",
            "edges",
            "__",
            "border_s",
            "__",
            {
              "literal": "of"
            },
            "__",
            "selectors",
            "__",
            {
              "literal": "to"
            },
            "__",
            "style",
            "s"
          ],
          "postprocess": $set_sel_border
        },
        {
          "name": "assignment",
          "symbols": [
            {
              "literal": "set"
            },
            "__",
            {
              type: "vname"
            },
            "__",
            {
              "literal": "to"
            },
            "__",
            "value",
            "s"
          ],
          "postprocess": $assignment
        },
        {
          "name": "value",
          "symbols": ["string"],
          "postprocess": $first
        },
        {
          "name": "value",
          "symbols": ["number"],
          "postprocess": $first
        },
        {
          "name": "value",
          "symbols": [
            {
              type: "boolean"
            }
          ],
          "postprocess": $first
        },
        {
          "name": "string",
          "symbols": [
            {
              type: "dq_string"
            }
          ],
          "postprocess": $first
        },
        {
          "name": "string",
          "symbols": [
            {
              type: "sq_string"
            }
          ],
          "postprocess": $first
        },
        {
          "name": "number",
          "symbols": [
            {
              type: "integer"
            }
          ],
          "postprocess": $first
        },
        {
          "name": "number",
          "symbols": [
            {
              type: "float"
            }
          ],
          "postprocess": $first
        },
        {
          "name": "style",
          "symbols": ["string"],
          "postprocess": $first
        },
        {
          "name": "border_s",
          "symbols": [
            {
              "literal": "border"
            }
          ],
          "postprocess": $first
        },
        {
          "name": "border_s",
          "symbols": [
            {
              "literal": "borders"
            }
          ],
          "postprocess": $first
        },
        {
          "name": "edges$ebnf$1",
          "symbols": ["edge_comma"]
        },
        {
          "name": "edges$ebnf$1",
          "symbols": ["edges$ebnf$1",
        "edge_comma"],
          "postprocess": function(d) {
            return d[0].concat([d[1]]);
          }
        },
        {
          "name": "edges",
          "symbols": ["edges$ebnf$1",
        "edge"],
          "postprocess": $flatten
        },
        {
          "name": "edges",
          "symbols": ["edge"]
        },
        {
          "name": "edge_comma",
          "symbols": [
            "edge",
            "_",
            {
              type: "comma"
            },
            "_"
          ],
          "postprocess": $first
        },
        {
          "name": "edge",
          "symbols": [
            {
              type: "edge"
            }
          ],
          "postprocess": $first_value('edge')
        },
        {
          "name": "select",
          "symbols": ["select_fields"],
          "postprocess": $first
        },
        {
          "name": "select_fields",
          "symbols": [
            {
              "literal": "select"
            },
            "__",
            {
              "literal": "fields"
            },
            "__",
            "selectors",
            "s"
          ],
          "postprocess": $select_fields
        },
        {
          "name": "selectors$ebnf$1",
          "symbols": ["selector_comma"]
        },
        {
          "name": "selectors$ebnf$1",
          "symbols": ["selectors$ebnf$1",
        "selector_comma"],
          "postprocess": function(d) {
            return d[0].concat([d[1]]);
          }
        },
        {
          "name": "selectors",
          "symbols": ["selectors$ebnf$1",
        "selector"],
          "postprocess": $flatten
        },
        {
          "name": "selectors",
          "symbols": ["selector"],
          "postprocess": $flatten
        },
        {
          "name": "selector_comma",
          "symbols": [
            "selector",
            "_",
            {
              type: "comma"
            },
            "_"
          ],
          "postprocess": $first
        },
        {
          "name": "selector",
          "symbols": ["abstract_selector"],
          "postprocess": $first
        },
        {
          "name": "selector",
          "symbols": ["cell_selector"],
          "postprocess": $first
        },
        {
          "name": "abstract_selector",
          "symbols": ["id"],
          "postprocess": $first
        },
        {
          "name": "cell_selector",
          "symbols": ["cellkey"],
          "postprocess": $first
        },
        {
          "name": "cell_selector",
          "symbols": ["rangekey"],
          "postprocess": $first
        },
        {
          "name": "rangekey",
          "symbols": [
            "cellkey",
            {
              type: "upto"
            },
            "cellkey"
          ],
          "postprocess": $rangekey
        },
        {
          "name": "cellkey",
          "symbols": [
            {
              type: "cellkey"
            }
          ],
          "postprocess": $cellkey
        },
        {
          "name": "clasz$ebnf$1",
          "symbols": [/[a-z_]/]
        },
        {
          "name": "clasz$ebnf$1",
          "symbols": ["clasz$ebnf$1",
        /[a-z_]/],
          "postprocess": function(d) {
            return d[0].concat([d[1]]);
          }
        },
        {
          "name": "clasz",
          "symbols": [
            {
              "literal": "."
            },
            "clasz$ebnf$1"
          ],
          "postprocess": $clasz
        },
        {
          "name": "s",
          "symbols": [
            {
              type: "semicolon"
            }
          ],
          "postprocess": $first
        },
        {
          "name": "gridsize",
          "symbols": ["cellkey"],
          "postprocess": $first
        },
        {
          "name": "id",
          "symbols": [
            {
              type: "id"
            }
          ],
          "postprocess": $id
        },
        {
          "name": "__$ebnf$1",
          "symbols": [
            {
              type: "lws"
            }
          ]
        },
        {
          "name": "__$ebnf$1",
          "symbols": [
            "__$ebnf$1",
            {
              type: "lws"
            }
          ],
          "postprocess": function(d) {
            return d[0].concat([d[1]]);
          }
        },
        {
          "name": "__",
          "symbols": ["__$ebnf$1"],
          "postprocess": $ignore
        },
        {
          "name": "_$ebnf$1",
          "symbols": []
        },
        {
          "name": "_$ebnf$1",
          "symbols": [
            "_$ebnf$1",
            {
              type: "lws"
            }
          ],
          "postprocess": function(d) {
            return d[0].concat([d[1]]);
          }
        },
        {
          "name": "_",
          "symbols": ["_$ebnf$1"],
          "postprocess": $ignore
        }
      ],
      ParserStart: "source"
    };
    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
      return module.exports = grammar;
    } else {
      return window.grammar = grammar;
    }
  })();

}).call(this);
